---

- name: Run jobs and generate report
  hosts: N1
  gather_facts: no
  order: sorted

  collections:
    - ansible.builtin
    - community.general

  vars:
    # Location for job reports
    outdir: /var/tmp/reports
    # CSS styling for navbar: menu width, failed/missing colors
    nav_width: 200px
    failed_style: 'color:orangered'
    missing_style: 'color:grey;text-decoration:line-through'
    # Email options
    send_email: false
    smtp_host: mail.yourcompany.com
    smtp_port: 25
    mail_from: "source@email.com"
    mail_to: "dest1@email.com,dest2@email.com"
    mail_subject: "Ansible job report"
    # Uncomment these if authentication is required
    #smtp_user:
    #smtp_pass: 

  pre_tasks:
  
    - set_fact:
        ansible_httpapi_pass: Changeme123!

    - name: Create output folder
      run_once: yes
      delegate_to: localhost
      file:
        path: "{{ outdir }}"
        state: directory
    
    # We set hosts as failed/missing until proven otherwise. See README.md
    - name: Set initial job status to catch missing/failed hosts
      set_fact:
        job_success: False
        missing: True

    # - name: Variables before setup 
    #   debug:
    #     var: vars

    # - name: Gather {{ inventory_hostname }} facts and weed out unavailable hosts
    #   setup:
    
    - name: Gather System information from {{ inventory_hostname }}
      nxos_facts:
        gather_subset: hardware

    - name: Set remaining hosts as not missing
      set_fact:
        missing: False

    # - name: Variables After setup 
    #   debug:
    #     var: vars

  tasks:
    
    ############################
    # Add your own tasks here! #
    ############################
    - name: Fetch Capabitlies from {{ inventory_hostname }} using gnmic client
      ansible.builtin.import_role:
        name: gnmic_cli
      vars:
        gnmic_action: capabilities  
        gnmic_linux_host: linux-n1
      ignore_errors: yes

    - name: Set capbilities output facts
      set_fact:
        gnmi_output_capabilities: "{{ gnmi_output }}"

    - name: Output from gnmic capabilites fetch on {{ inventory_hostname }}
      ansible.builtin.debug:
        var: gnmi_output.stdout

    - name: Verify fetched capabilities from {{ inventory_hostname }}
      ansible.builtin.assert:
        that:
          - "'Cisco Systems' in gnmi_output.stdout"
        fail_msg: "FAIL: Capabilites NOT received from {{ inventory_hostname }}"
        success_msg: "PASS: Capabilites received from {{ inventory_hostname }}"

    - name: Fetch hostname from {{ inventory_hostname }} using yang data model
      ansible.builtin.import_role:
        name: gnmic_cli
      vars:
        gnmic_action: get
        path:
          - System/name
        gnmic_linux_host: linux-n1
      ignore_errors: yes

    - name: Set yang data model output facts
      set_fact:
        gnmi_output_metrics: "{{ gnmi_output }}"

    - name: Output from hostname fetched with native yang data model
      ansible.builtin.debug:
        var: gnmi_output.stdout

    - name: Verify hostname is fetched correctly from {{ inventory_hostname }} using nxos native yang data model
      ansible.builtin.assert:
        that:
          - "'System/name' in gnmi_output.stdout|from_json|json_query('[0].updates[0].Path')"
        fail_msg: "FAIL: Hostname NOT received from {{ inventory_hostname}} using nxos native yang data model"
        success_msg: "PASS: Hostname received from {{ inventory_hostname}} using nxos native yang data model"
      ignore_errors: yes

    - debug:
        var: vars

  post_tasks:

    - name: Mark host as successful if capablities and hostname can be fetched with yang models
      set_fact:
        job_success: True
      when:
        - "'Cisco Systems' in gnmi_output_capabilities.stdout"
        - "'System/name' in gnmi_output_metrics.stdout|from_json|json_query('[0].updates[0].Path')"
      

    # - name: Variables after job_success 
    #   debug:
    #     var: vars

    # Saving curated lists of hosts as localhost facts, to make the Jinja loops easier to read in the template. 
    # To use: hostvars['localhost']['success_list'] , etc
    - name: Save summary facts under Ansible controller
      delegate_to: localhost
      delegate_facts: True
      run_once: yes
      set_fact:
        date_str: "{{ date }}_{{ hms }}"
        date_str_pretty: "{{ date }} {{ hms_pretty }}"
        success_list: '{{ hostvars | dict2items | json_query(success_query) }}'
        failed_list: '{{ hostvars | dict2items | json_query(failed_query) }}'
        missing_list: '{{ hostvars | dict2items | json_query(missing_query) }}'
      vars:
        success_query: "[?value.job_success==`true`].key"
        failed_query: "[?value.job_success==`false` && value.missing==`false`].key"
        missing_query: "[?value.missing==`true`].key"
        date: "{{ '%Y-%m-%d' | strftime }}"
        hms_pretty: "{{ '%H:%M:%S' | strftime }}"
        hms: "{{ hms_pretty | replace(':','-') }}"
    
    # - debug:
    #     msg:
    #       - "{{ hostvars['localhost'] }}"
    #       - "success_list: {{ hostvars['localhost']['success_list'] }}"
    #       - "failed_list: {{ hostvars['localhost']['failed_list'] }}"
    #       - "missing_list: {{ hostvars['localhost']['missing_list'] }}"
    - name: Save job report to {{ outdir }}
      delegate_to: localhost
      delegate_facts: True
      run_once: yes
      template:
        src: job_report_master.j2
        dest: "{{ outdir  }}/job_report_{{ hostvars['localhost']['date_str'] }}.html"

    - name: Send email report from Ansible server
      delegate_to: localhost
      run_once: yes
      when: send_email
      mail:
        host: "{{ smtp_host }}"
        port: "{{ smtp_port }}"
        username: "{{ smtp_user | default(omit) }}"
        password: "{{ smtp_pass | default(omit) }}"
        from: "{{ mail_from }}"
        to: "{{ mail_to }}"
        subject: "{{ mail_subject }}"
        subtype: html
        body: |
          <p>See attached for a detailed job report.</p>
          <p><strong>Successful hosts</strong>:<br><br>{{ hostvars['localhost']['success_list'] | join(' ') }}</p>
          <p style="color:red;"><strong>Failed hosts</strong>: <br><br>{{ hostvars['localhost']['failed_list'] | join(' ') }}</p>
          <p style="color:fuchsia;"><strong>Missing hosts</strong>: {{ hostvars['localhost']['missing_list'] | join(' ') }}</p>
          <p><i>Generated by playbook {{ playbook_dir }}/job_report.yaml on {{ hostvars['localhost']['date_str_pretty'] }}</i></p>
        attach:
          - "{{ outdir }}/job_report_{{ hostvars['localhost']['date_str'] }}.html"
